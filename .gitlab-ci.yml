.only-default: &only-default
  only:
    - master
    - merge_requests
    - tags

default:
  image: python:3.8.12

stages:
  - static-analysis
  - formatting
  - test
  - docker

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

cache:
  paths:
    - .cache/
    - venv/

before_script:
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install tox pylint-exit anybadge

pylint:
  stage: static-analysis
  needs: []
  allow_failure: true
  script:
    - cd desire_coap_server
    - mkdir ./pylint
    - tox -e lint | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./desire_coap_server/pylint/

black:
  stage: formatting
  script:
    - cd desire_coap_server
    - mkdir ./black
    - tox -e black && BLACK_STATUS=0 || BLACK_STATUS=$?
    - anybadge --label=Black --color red --value=$BLACK_STATUS --file=./black/black.svg 1=green
    - echo "Black status is $BLACK_STATUS"
  artifacts:
    paths:
      - ./desire_coap_server/black/

tox-test:
  stage: test
  script:
    - cd desire_coap_server
    - tox -e test,flake8,lint
  artifacts:
    when: always
    reports:
        junit: ./desire_coap_server/test-report.xml
    paths:
        - ./desire_coap_server/test-report.xml
    expire_in: 4 week

docker-build:
  only:
    - master
  stage: docker
  variables:
    DOCKER_DRIVER: overlay2
    BUILDX_VERSION: "v0.6.1"
    BUILDX_ARCH: "linux-amd64"
  services:
    - docker:20.10.8-dind
  image: docker:20.10.8
  before_script:
    - echo "$CI_DOCKERHUB_PASSWORD" | docker login --username "$CI_DOCKERHUB_USER" --password-stdin
    - wget -O /usr/bin/docker-buildx
      https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.${BUILDX_ARCH}
    - chmod +x /usr/bin/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then IMAGE_TAG="latest"; else IMAGE_TAG="$CI_COMMIT_TAG"; fi
    - docker-buildx create --use
    - docker-buildx build
      --platform linux/amd64,linux/arm64/v8
      --tag "$CI_DOCKERHUB_REGISTRY"/"$CI_DOCKERHUB_COAP_SERVER_IMAGE":"$IMAGE_TAG"
      --push
      -f desire_coap_server/docker/Dockerfile
      .
